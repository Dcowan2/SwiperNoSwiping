{"version":3,"sources":["axios.js","PuppyCards.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","PuppyCards","useState","dog","setDog","useEffect","a","get","req","data","fetchData","console","log","className","map","puppy","key","name","preventSwipe","onSwipe","dir","onCardLeftScreen","style","backgroundImage","imgUrl","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qUAMeA,E,OAJCC,EAAMC,OAAO,CACzBC,QAAQ,0BC0CGC,MAxCf,WAAuB,IAAD,EACEC,mBAAS,IADX,mBACbC,EADa,KACRC,EADQ,KAgBpB,OAbAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACoBR,EAAMS,IAAI,gBAD9B,OACQC,EADR,OAEEJ,EAAOI,EAAIC,MAFb,4CADc,uBAAC,WAAD,wBAKdC,KACC,IACHC,QAAQC,IAAIT,GAOV,yBAAKU,UAAU,cACb,yBAAKA,UAAU,cACZV,EAAIW,KAAI,SAACC,GAAD,OACP,kBAAC,IAAD,CACEF,UAAU,QACVG,IAAKD,EAAME,KACXC,aAAc,CAAC,KAAM,QACrBC,QAAS,SAACC,GAAoBL,EAAME,MACpCI,iBAAkB,WAAiBN,EAAME,OAEzC,yBACEJ,UAAU,OACVS,MAAO,CAAEC,gBAAgB,OAAD,OAASR,EAAMS,OAAf,OAExB,4BAAKT,EAAME,cCvBVQ,MARf,WACE,OACA,yBAAKZ,UAAU,OACb,kBAAC,EAAD,QCIgBa,QACW,cAA7BC,OAAOC,SAASC,UACe,UAA7BF,OAAOC,SAASC,UAChBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.ec8d3c65.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst instance= axios.create({\n    baseURL:'http://localhost:8001'\n})\n\nexport default instance;","import React, { useState,useEffect } from \"react\";\nimport TinderCard from \"react-tinder-card\";\nimport \"./PuppyCards.css\";\nimport axios from \"./axios\";\n\nfunction PuppyCards() {\n  const [dog, setDog] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const req = await axios.get(\"/puppy/cards\");\n      setDog(req.data);\n    }\n    fetchData();\n  }, []);\n  console.log(dog)\n  const swiped = (direction, nameToDelete) => {\n  };\n  const outOfFrame = (name) => {\n  };\n\n  return (\n    <div className=\"puppyCards\">\n      <div className=\"puppyCards\">\n        {dog.map((puppy) => (\n          <TinderCard\n            className=\"swipe\"\n            key={puppy.name}\n            preventSwipe={[\"up\", \"down\"]}\n            onSwipe={(dir) => swiped(dir, puppy.name)}\n            onCardLeftScreen={() => outOfFrame(puppy.name)}\n          >\n            <div\n              className=\"card\"\n              style={{ backgroundImage: `url(${puppy.imgUrl})` }}\n            >\n              <h3>{puppy.name}</h3>\n            </div>\n          </TinderCard>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default PuppyCards;\n","import React from 'react';\nimport './App.css';\nimport PuppyCards from './PuppyCards';\n\n\nfunction App() {\n  return (\n  <div className=\"app\">\n    <PuppyCards />\n  </div>    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}